["Ratners Group PLC's U.S. subsidiary", "has agreed to acquire jewelry retailer Weisfield's Inc.", "for $50 a share", "or about $55 million", "Ratners and Weisfield's", "said they reached an agreement in principle for the acquisition of Weisfield's by Sterling Inc.", "The companies said the acquisition is subject to a definitive agreement", "They said they expect the transaction to be completed by Dec. 15", "Weisfield's", "based in Seattle, Wash.", "currently operates 87 specialty jewelry stores in nine states", "In the fiscal year ended Jan. 31, the company reported sales of $59.5 million and pretax profit of $2.9 million", "Ratners", "which controls 25% of the British jewelry market", "would increase the number of its U.S. stores to about 450 stores from 360", "It has said it hopes to control 5% of jewelry business in the U.S. by 1992; currently it controls about 2%"]

Examples:
["next week", "Friday", "nearly two months", "1990", "Thursday", "Jan. 13", "Previously", "03/06/1998 13:19:00", "Thursday", "Feb. 23", "over a week", "Thursday", "daily", "Friday", "Friday", "10-hour"]

Explanation:
The time expressions are:
"next week", "Friday", "nearly two months", "1990", "Thursday", "Jan. 13", "Previously", "03/06/1998 13:19:00", "Thursday", "Feb. 23", "over a week", "Thursday", "daily", "Friday", "Friday", "10-hour"

*/

package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

func main() {
	if len(os.Args) < 2 {
		log.Fatal("Please provide a file path as the first argument")
	}

	filePath := os.Args[1]

	file, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)

	for scanner.Scan() {
		line := scanner.Text()
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}

		timeExpressions := []string{}
		for _, timeExpression := range timeExpressionsFromString(line) {
			timeExpressions = append(timeExpressions, timeExpression)
		}

		fmt.Println(strings.Join(timeExpressions, " "))
	}
}

func timeExpressionsFromString(line string) []string {
	timeExpressions := []string{}

	for _, timeExpression := range strings.Split(line, " ") {
		timeExpression = strings.TrimSpace(timeExpression)
		if timeExpression == "" {
			continue
		}

		timeExpressions = append(timeExpressions, timeExpression)
	}

	return timeExpressions
}

func main2() {
	if len(os.Args) < 2 {
		log.Fatal("Please provide a file path as the first argument")
	}

	filePath := os.Args[1]

	file, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	scanner.