[['homem', 'person'], ['ex-companheira', 'person'], ['Vila Nova de Gaia', 'location'], ...]
"""
import json
from nltk import word_tokenize
from nltk.stem import PorterStemmer
from nltk.tag import pos_tag
from nltk.corpus import stopwords

# Load the dictionary of classes and entities
with open('classes.json') as file:
   classes = json.load(file)

# Strip punctuation from text
def stripPunctuation(text):
   return " ".join([word for word in text if not word in [",", ";", ":", "'", '"']])

# Tokenize words into list
def tokenizer(text):
   return word_tokenize(stripPunctuation(text))

# Remove stopwords from tokens
def removeStopWords(tokens):
   return [w for w in tokens if not w in stopwords.words("portuguese")]

# Stem each token
def stemming(tokens):
   ps = PorterStemmer()
   return [ps.stem(t) for t in tokens]

# Tag each token with its part of speech
def tagger(tokens):
   return pos_tag(tokens)

# Classify each token based on its POS tag
def classifier(tags, classes):
   # Initialize empty list to store results
   result = []
   
   # Iterate over all tags
   for i in range(len(tags)):
       # Get the current tag
       tag = tags[i][1].lower()
       
       # Check if it's a person or organization
       if (tag == 'noun' and tags[i-2][0] != 'a'):
           result.append([' '.join(tags[:i]), 'person'])
           
       # Check if it's an object
       elif (tag == 'adjective'):
           result.append([' '.join(tags[:i+1]), 'object'])
           
       # Check if it's a location
       elif (tag == 'proper noun'):
           result