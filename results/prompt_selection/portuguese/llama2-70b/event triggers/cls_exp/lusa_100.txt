[['Penafiel', 'Occurrence'], ['violência física', 'Intensional Action'], ['injúrias', 'Aspectual'], ['ameaças de morte', 'Reporting'], ['ex-companheira', 'Perception'], ['separação', 'State'], ['perseguição', 'Action'], ['residência', 'Location'], ['local de trabalho', 'Location'], ['botão de pânico', 'Object'], ['medidas de proteção', 'Object']]
"""
import json
from nltk import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tag import pos_tag
from collections import Counter

stop = set(stopwords.words('portuguese'))
ps = PorterStemmer()

def get_classes():
   """Returns the list of classes to be used in classification"""
   return ["State", "Occurrence", "Reporting", "Perception", "Aspectual", "Intensional Action", "Intensional State"]

def classify(entity):
   """Classifies an entity based on its POS tag and stem"""
   if len(entity) == 1: # If it's a single token, check for POS tags
       if entity[0][1].startswith("NN") or entity[0][1].startswith("NNS"):
           return "Entity"
       elif entity[0][1].startswith("VB"):
           return "Verb"
       else:
           return None
   else: # Otherwise, check for stems
       stem = ps.stem(entity[0]) + "_" + ps.stem(entity[-1])
       if stem in {"_de", "_da", "_do", "_dos"} or stem.endswith("_a"):
           return "Preposition"
       elif stem.endswith("_o"):
           return "Article"
       elif stem.endswith("_e"):
           return "Conjunction"
       elif stem.endswith("_l"):
           return "Adverb"
       elif stem.