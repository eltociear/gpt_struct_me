[["jovem", "Occurrence"], ["autocarro", "Reporting"], ["Vila das Aves", "State"], ["conselho", "Aspectual"], ["Santo Tirso", "Intensional Action"]]
"""
import json
from nltk import word_tokenize
from nltk.stem import PorterStemmer
from nltk.tag import pos_tag
from nltk.chunk import ne_chunk
from nltk.tree import Tree
from collections import Counter
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.multioutput import MultiOutputClassifier
from sklearn.externals import joblib
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import precision_recall_curve
from sklearn.metrics import average_precision_score
from sklearn.decomposition import TruncatedSVD
from sklearn.manifold import MDS
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import re
import string
import os
import sys
import time
import random
import pickle
import argparse

# Load the data
def load_data(path):
   """Loads the data from a file and returns it in a list of lists."""
   with open(path) as f:
       lines = [line for line in f]
   
   # Remove empty lines
   lines = [l for l in lines if len(l)]
   
   return lines

# Tokenize the text
def