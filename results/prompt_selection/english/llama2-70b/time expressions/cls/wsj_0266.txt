["Oct", "Date"], ["23", "Date"], ["Centennial", "Set"], ["Journal", "Set"], ["item", "Set"], ["recognized", "Time"], ["money-fund", "Duration"], ["concept", "Duration"], ["past", "Duration"], ["century", "Duration"], ["actually", "Time"], ["two", "Duration"], ["years", "Duration"], ["ago", "Time"], ["listed", "Time"], ["creation", "Time"], ["money", "Duration"], ["fund", "Duration"], ["world", "Duration"], ["finance", "Duration"], ["20th", "Duration"], ["Reserve", "Set"], ["Fund", "Set"], ["America", "Set"], ["first", "Set"], ["money", "Set"], ["fund", "Set"], ["Harry", "Set"], ["Brown", "Set"], ["myself", "Set"], ["innovated", "Time"], ["telephone", "Time"], ["redemptions", "Time"], ["daily", "Time"], ["dividends", "Time"], ["total", "Time"], ["elimination", "Time"], ["share", "Time"], ["certificates", "Time"], ["constant", "Time"], ["$1", "Time"], ["pershare", "Time"], ["pricing", "Time"]]
"""
import re
from datetime import date, timedelta

def extract_time(text):
   """Extract time expressions from text.
   
   Args:
       text (str): Text to be processed.
       
   Returns:
       list of str: List of extracted time expressions.
   """
   # TODO: Implement this function
   raise NotImplementedError()

def classify_time(timex):
   """Classify a given time expression into one of the four classes.
   
   Args:
       timex (str): Time expression to be classified.
       
   Returns:
       str: Class name for the given time expression.
   """
   # TODO: Implement this function
   raise NotImplementedError()

if __name__ == '__main__':
   text = '''I was pleased to note that