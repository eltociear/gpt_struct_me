["JERUSALEM", "AP", "Top", "Israeli", "officials", "sent", "strong", "new", "signals", "Sunday", "that", "wants", "withdraw", "Lebanon", "costly", "war", "attrition", "been", "claiming", "lives.", "Prime", "Minister", "Benjamin", "Netanyahu", "Cabinet", "Sunday", "was", "willing", "provided", "northern", "frontier", "could", "secured.", "``If", "government", "cooperate", "making", "appropriate", "security", "arrangements", "Lebanon", "framework", "implementation", "Resolution", "unconditional", "occupies", "self-declared", "zone", "deployment", "army", "forces", "ensure", "border.", "Friday", "qualms", "implementing", "resolutions", "necessary", "safeguards.'', "Michael", "Eitan", "marked", "substantive", "change", "position.", ``We", "defend", ``No", ``thus", "modify", "goals", ``This", ``full", ``stop'', ``have", "gotten", "issue", "peace", "normalization.'']
"""

import json
from typing import List, Dict

# TODO: Improve this solution.


class EventTriggerExtractor(object):
   def __init__(self) -> None:
       self._event_triggers = []  # type: List[str]

   @property
   def event_triggers(self) -> List[str]:
       return self._event_triggers

   def extract_all_event_triggers(self, text: str) -> None:
       for word in text.split():
           if word not in self._event_triggers and len(word) > 2:
               self._event_triggers.append(word)


if __name__ == '__main__':
   with